language Pyret {

  (Lambda params body) {
    import 1;
    import 2;
    bind 1 in 2;
  }

  (Apply func arg) {
    import 1;
    import 2;
  }

  (Arg arg args) {
    import 1;
    import 2;
  }

  (End) {}

  (Param param params) {
    import 1;
    import 2;
    export 1;
    export 2;
  }

  (Letrec binds body) {
    import 1;
    import 2;
    export 1;
    export 2;
    bind 1 in 2;
  }

  (LetrecBind name value binds) {
    import 1;
    import 2;
    import 3;
    export 3;
    bind 1 in 3;
    bind 3 in 1;
    bind 3 in 2;
  }

  (LetBind name value binds) {
    import 1;
    import 2;
    import 3;
    export 3;
    bind 1 in 3;
  }

  (LetExpr bindings body) {
    import 1;
    import 2;
    bind 1 in 2;
  }

  (* Sugars *)

  sugar (For iter binds body)
  sugar (From param arg froms)
  sugar (Fun name params body rest_stmts)
  sugar (Let name value rest_stmts)  

  (* For loops *)

  rule (For iter binds body)
    => (DesugarFor iter binds (End) (End) body)

  rule (DesugarFor iter (End) params args body)
     => (Apply iter (Arg (Lambda params body) args))

  rule (DesugarFor iter (From param arg binds) params args body)
    => (DesugarFor iter binds (AppendParam param params) (AppendArg arg args) body)

  rule (AppendParam param (End))
    => (Param param (End))

  rule (AppendParam new_param (Param param params))
    => (Param param (AppendParam new_param params))

  rule (AppendArg arg (End))
    => (Arg arg (End))

  rule (AppendArg new_arg (Arg arg args))
    => (Arg arg (AppendArg new_arg args))


  (* Functions *)

  rule (Fun name params body rest_stmts)
    => (Letrec (LetrecBind name (Lambda params body) (End)) rest_stmts)


  (* Let statements *)

  rule (LetExpr binds (Let name value rest_stmts))
    => (LetExpr (AppendBind name value binds) rest_stmts)

  rule (Let name value rest_stmts)
    => (LetExpr (LetBind name value (End)) rest_stmts)

  rule (AppendBind name value (End))
    => (LetBind name value (End))

  rule (AppendBind _name _value (LetBind name value binds))
    => (LetBind name value (AppendBind _name _value binds))
}
