language R5RS {


  (* Functions *)
  
  (Lambda param body) {
    import 1;
    import 2;
    bind 1 in 2;
  }
  (Param name params) {
    import 1;
    import 2;
    export 1;
    export 2;
  }
  (End) {}
  
  (Apply func args) {
    import 1;
    import 2;
  }
  (Arg arg args) {
    import 1;
    import 2;
  }


  (* Multiple bodies *)

  (Void) {}
  (Begin expr rest) {
    import 1;
    import 2;
  }


  (* Set *)
  
  (Set var defn stmts) {
    import 1;
    import 2;
    import 3;
    export 3;
  }


  (* Conditionals *)

  (If cond consq altern) {
    import 1;
    import 2;
    import 3;
  }


  (* Sugars *)

  sugar (Let binds body)
  sugar (LetBind var init binds)

  sugar (Letstar binds body)
  sugar (LetstarBind var init binds)

  sugar (Letrec binds body)
  sugar (LetrecBind var init binds) {
    disjoint import 1;
    disjoint bind 1 in 3;
  }

  sugar (NamedLet proc_id binds body)
  sugar (NamedLetBind arg_id init_expr binds)

(*
  sugar (Do binds test body)
  sugar (DoBindStep var init step binds)
  sugar (DoBind var init binds)
  sugar (DoTest test expr)
*)

  (* Regular Let *)

  rule (Let binds body)
    => (DesugarLet binds body (End) (End))

  rule (DesugarLet (LetBind x defn binds) body params args)
    => (DesugarLet binds body (AppendParam x params) (AppendArg defn args))

  rule (DesugarLet (End) body params args)
    => (Apply (Lambda params body) args)


  (* Letstar *)

  rule (Letstar (End) body)
    => (Let (End) body)

  rule (Letstar (LetstarBind id init binds) body)
    => (Let (LetBind id init (end))
         (Letstar binds body))


  (* Letrec *)

  rule (Letrec binds body)
    => (WrapLetrec (DsLetrec binds body))

  rule (DsLetrec (LetrecBind var init binds) body)
    => (LetrecBind var init (DsLetrec binds body))

  rule (DsLetrec (End) body)
    => (DsLetrecBinds (End) (End) body)

  rule (LetrecBind var init
         (DsLetrecBinds undef_binds init_binds body))
    => (DsLetrecBinds
         (LetstarBind var (Void) undef_binds)
         (LetstarBind @x init init_binds)
         (Set as_refn$var $x body))

  rule (WrapLetrec (DsLetrecBinds undef_binds init_binds body))
    => (Letstar undef_binds (Letstar init_binds body))


  (* Sanity Check: Make sure that Letrec has the same binding
     weather it's desugared in general (above), or for the specific
     case of two bindings (below). *)

  rule (Letrec (LetrecBind x a (LetrecBind y b (End))) body)
    => (Letstar (LetstarBind x (Void) (LetstarBind y (Void) (End)))
         (Letstar (LetstarBind @alpha a (LetstarBind @beta b (End)))
           (Set as_refn$x $alpha (Set as_refn$y $beta body))))

  (* Test disjointness requirement: replacing "@y" with "@x" gives a disjointness error. *)
  rule (TestDisj body)
    => (Letrec (LetrecBind @x (Void) (LetrecBind @y (Void) (End))) body)

  (* Named Let *)

  rule (NamedLet proc_id binds body)
    => (DesugarNamedLet proc_id binds body (End) (End))

  rule (DesugarNamedLet proc_id (End) body params args)
    => (Letrec
         (LetrecBind proc_id (Lambda params body) (End))
         (Apply as_refn$proc_id args))

  rule (DesugarNamedLet proc_id (NamedLetBind arg_id init_expr binds) body params args)
    => (DesugarNamedLet proc_id binds body (AppendParam arg_id params) (AppendArg init_expr args))




  (* Do *)
(*
  rule (Do binds test commands)
    => (WrapDo (DsDo binds test commands))

  rule (DsDo (DoBind var init binds) test commands)
    => (DoBind var init (DsDo binds test commands))

  rule (DsDo (DoBindStep var init step binds) test commands)
    => (DoBindStep var init step (DsDo binds test commands))

  rule (DsDo (End) test commands)
    => (DsDoBinds test commands (End) (End) (End))

  rule (DoBind var init (DsDoBinds test commands inits vars steps))
    => (DsDoBinds test commands (Arg init inits) (Param var vars) (Arg as_refn$var steps))

  rule (DoBindStep var init step (DsDoBinds test commands inits vars steps))
    => (DsDoBinds test commands (Arg init inits) (Param var vars) (Arg step steps))

  rule (WrapDo (DsDoBinds (DoTest test exprs) commands inits vars steps))
    => (Letrec (LetrecBind @loop
         (Lambda vars
           (If test
             (Begin (Void) exprs)
             (Begin commands (Apply $loop steps)))))
         (Apply $loop inits))
*)

(* The obvious desugaring doesn't work, and infers (among other things)
   that the variables are bound in the `init` expressions. *)

(*
  rule (Do binds test commands)
    => (DesugarDo binds test commands (End) (End) (End))

  rule (DesugarDo (DoBind var init binds) test commands inits vars steps)
    => (DesugarDo binds test commands
         (AppendArg init inits)
         (AppendParam var vars)
         (AppendArg as_refn$var steps))

  rule (DesugarDo (DoBindStep var init step binds) test commands inits vars steps)
    => (DesugarDo binds test commands
         (AppendArg init inits)
         (AppendParam var vars)
         (AppendArg step steps))

  rule (DesugarDo (End) (DoTest test exprs) commands (Arg a inits) (Param b vars) (Arg c steps))
    => (Letrec (LetrecBind @loop
         (Lambda (Param b vars)
           (If test
             (Begin (Void) exprs)
             (Begin commands (Apply $loop (Arg c steps))))))
         (Apply $loop (Arg a inits)))
*)


  (* Helpers *)
  
  rule (AppendParam param (End))
    => (Param param (End))

  rule (AppendParam new_param (Param param params))
    => (Param param (AppendParam new_param params))

  rule (AppendArg arg (End))
    => (Arg arg (End))

  rule (AppendArg new_arg (Arg arg args))
    => (Arg arg (AppendArg new_arg args))


}
