language NamedLet {


  (* Functions *)
  
  (Lambda param body) {
    import 1;
    import 2;
    bind 1 in 2;
  }
  (Param name params) {
    import 1;
    import 2;
    export 1;
    export 2;
  }
  (End) {}
  
  (Apply func args) {
    import 1;
    import 2;
  }
  (Arg arg args) {
    import 1;
    import 2;
  }


  (* Multiple bodies *)
  
  (Seqn expr rest) {
    import 1;
    import 2;
  }


  (* Letrecs *)

  (* TODO *)
  (LetrecCore binds body) {
    import 1;
    import 2;
    bind 1 in 2;
  }
  (Bindrec name defn binds) {
    import 1;
    import 2;
    import 3;
    bind 1 in 3;
    bind 3 in 2;
    export 3;
  }

  (TestFwd name defn binds) {
    import 1;
    import 2;
    import 3;
    bind 1 in 2;
    bind 1 in 3;
    bind 3 in 2;
    export 1;
    export 3;
  }
  (TestRev name defn binds) {
    import 1;
    import 2;
    import 3;
    bind 1 in 2;
    bind 3 in 1;
    bind 3 in 2;
    export 1;
    export 3;
  }


  (* Regular (parallel) Let *)
  
  (Let binds body) {
    import 1;
    import 2;
    bind 1 in 2;
  }
  (LetBind name defn binds) {
    import 1;
    import 2;
    import 3;
    export 1;
    export 3;
    bind 1 in 3;
    bind 3 in 1;
  }
  
  (Set var defn stmts) {
    import 1;
    import 2;
    import 3;
    export 3;
  }


  (* Miscellaneous (and undinteresting) core constructs *)

  (If cond consq) {
    import 1;
    import 2;
  }
  (IfThenElse cond consq altern) {
    import 1;
    import 2;
    import 3;
  }
  (Void) {}
  

  (* TODO *)

  (Todo) {}


  (* Sugars *)

  sugar (Letrec binds body)
  sugar (LetrecBind var init binds)
  sugar (RLetrecBind var init binds)

  sugar (Letstar binds body)
  sugar (LetstarBind var init binds)


  (* Letstar *)

  rule (Letstar (End) body)
    => (Let (End) body)

  rule (Letstar (LetstarBind id init binds) body)
    => (Let (LetBind id init (end))
         (Letstar binds body))


  (* Letrec *)
(*
  rule (Letrec binds body)
    => (DesugarLetrec (ReverseLetrecBinds binds (End)) (End) (End) body)

  rule (DesugarLetrec (End) undef_binds init_binds body)
    => (Letstar undef_binds (Letstar init_binds body))

  rule (DesugarLetrec
         (RLetrecBind var init binds)
         undef_binds
         init_binds
         body)
    => (DesugarLetrec
         binds
         (LetstarBind var (Void) undef_binds)
         (LetstarBind @x init init_binds)
         (Set (Todo) $x body))
*)

  rule (ReverseLetrecBinds (End) (End))
    => (End)

  rule (ReverseLetrecBinds (End) (RLetrecBind id init binds))
    => (LetrecBind id init binds)

  rule (ReverseLetrecBinds (LetrecBind id init binds) reversed)
    => (ReverseLetrecBinds binds (RLetrecBind id init reversed))


(* EXAMPLE *)

(*
  rule (Letrec (LetrecBind x a (LetrecBind y b (End))) body)
    => (Letstar (LetstarBind x (Void) (LetstarBind y (Void) (End)))
         (Letstar (LetstarBind @alpha a (LetstarBind @beta b (End)))
           (Set (Todo) $alpha (Set (Todo) $beta body))))
*)

}
