language NamedLet {


  (* Functions *)
  
  (Lambda param body) {
    import 1;
    import 2;
    bind 1 in 2;
    bind 1 in 1; (* ! *)
  }
  (Param name params) {
    import 1;
    import 2;
    export 1;
    export 2;
    bind 1 in 2; (* ! *)
    bind 2 in 1;
  }
  (End) {}
  
  (Apply func args) {
    import 1;
    import 2;
  }
  (Arg arg args) {
    import 1;
    import 2;
  }


  (* Multiple bodies *)

  (Void) {}
  (Begin expr rest) {
    import 1;
    import 2;
  }


  (* Letrecs *)

  (Letrec binds body) {
    import 1;
    import 2;
    bind 1 in 2;
  }
  (Bindrec name defn binds) {
    import 1;
    import 2;
    import 3;
    bind 1 in 3;
    bind 3 in 2;
    export 3;
  }

  (TestFwd name defn binds) {
    import 1;
    import 2;
    import 3;
    bind 1 in 2;
    bind 1 in 3;
    bind 3 in 2;
    export 1;
    export 3;
  }
  (TestRev name defn binds) {
    import 1;
    import 2;
    import 3;
    bind 1 in 2;
    bind 3 in 1;
    bind 3 in 2;
    export 1;
    export 3;
  }


  (* Regular (parallel) Let *)
  
  (Let binds body) {
    import 1;
    import 2;
    bind 1 in 2;
  }
  (LetBind name defn binds) {
    import 1;
    import 2;
    import 3;
    export 1;
    export 3;
    bind 1 in 3;
    bind 3 in 1;
  }
  
  (Set var defn stmts) {
    import 1;
    import 2;
    import 3;
    export 3;
  }


  (* Conditionals *)

  (If cond consq altern) {
    import 1;
    import 2;
    import 3;
  }
  

  (* Sugars *)

  sugar (Letstar binds body)
  sugar (LetstarBind var init binds)

  sugar (Do binds test body)
  sugar (DoBindStep var init step binds)
  sugar (DoBind var init binds)  (* If 'step...' is empty *)
  sugar (DoTest test expr)


  (* Letstar *)

  rule (Letstar (End) body)
    => (Let (End) body)

  rule (Letstar (LetstarBind id init binds) body)
    => (Let (LetBind id init (end))
         (Letstar binds body))


  (* Do *)

  rule (Do binds test commands)
    => (DesugarDo binds test commands (End) (End) (End))

  rule (DesugarDo (DoBind var init binds) test commands inits vars steps)
    => (DesugarDo binds test commands
         (AppendArg init inits)
         (AppendParam var vars)
         (AppendArg as_refn$var steps))

  rule (DesugarDo (DoBindStep var init step binds) test commands inits vars steps)
    => (DesugarDo binds test commands
         (AppendArg init inits)
         (AppendParam var vars)
         (AppendArg step steps))

  rule (DesugarDo (End) (DoTest test exprs) commands (Arg a inits) (Param b vars) (Arg c steps))
    => (Letrec (Bindrec @loop
         (Lambda (Param b vars)
           (If test
             (Begin (Void) exprs)
             (Begin commands (Apply $loop (Arg c steps))))))
         (Apply $loop (Arg a inits)))



  (* Helpers *)
  
  rule (AppendParam param (End))
    => (Param param (End))

  rule (AppendParam new_param (Param param params))
    => (Param param (AppendParam new_param params))

  rule (AppendArg arg (End))
    => (Arg arg (End))

  rule (AppendArg new_arg (Arg arg args))
    => (Arg arg (AppendArg new_arg args))

}
