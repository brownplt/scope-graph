language R5RS {


  (* Functions *)
  
  (Lambda param body) {
    import param;
    import body;
    bind param in body;
  }
  (Param name params) {
    import name;
    import params;
    export name;
    export params;
  }
  (End) {}
  
  (Apply func args) {
    import func;
    import args;
  }
  (Arg arg args) {
    import arg;
    import args;
  }


  (* Multiple bodies *)

  (Void) {}
  (Begin expr rest) {
    import expr;
    import rest;
  }


  (* Set *)
  
  (Set var defn stmts) {
    import var;
    import defn;
    import stmts;
    export stmts;
  }


  (* Conditionals *)

  (If cond consq altern) {
    import cond;
    import consq;
    import altern;
  }


  (* Sugars *)

  sugar (Let binds body)
  sugar (LetBind var init binds)

  sugar (Letstar binds body)
  sugar (LetstarBind var init binds)

  sugar (Letrec binds body)
  sugar (LetrecBind var init binds) {
    disjoint import var;
    disjoint bind var in binds;
  }

  sugar (NamedLet proc_id binds body)
  sugar (NamedLetBind arg_id init_expr binds)


  (* Regular Let *)

  rule (Let binds body)
    => (DesugarLet binds body (End) (End))

  rule (DesugarLet (LetBind x defn binds) body params args)
    => (DesugarLet binds body (AppendParam x params) (AppendArg defn args))

  rule (DesugarLet (End) body params args)
    => (Apply (Lambda params body) args)


  (* Letstar *)

  rule (Letstar (End) body)
    => (Let (End) body)

  rule (Letstar (LetstarBind id init binds) body)
    => (Let (LetBind id init (end))
         (Letstar binds body))


  (* Letrec *)

  rule (Letrec binds body)
    => (WrapLetrec (DsLetrec binds body))

  rule (DsLetrec (LetrecBind var init binds) body)
    => (LetrecBind var init (DsLetrec binds body))

  rule (DsLetrec (End) body)
    => (DsLetrecBinds (End) (End) body)

  rule (LetrecBind var init
         (DsLetrecBinds undef_binds init_binds body))
    => (DsLetrecBinds
         (LetstarBind var (Void) undef_binds)
         (LetstarBind @x init init_binds)
         (Set as_refn$var $x body))

  rule (WrapLetrec (DsLetrecBinds undef_binds init_binds body))
    => (Letstar undef_binds (Letstar init_binds body))


  (* Sanity Check: Make sure that Letrec has the same binding
     weather it's desugared in general (above), or for the specific
     case of two bindings (below). *)

  rule (Letrec (LetrecBind x a (LetrecBind y b (End))) body)
    => (Letstar (LetstarBind x (Void) (LetstarBind y (Void) (End)))
         (Letstar (LetstarBind @alpha a (LetstarBind @beta b (End)))
           (Set as_refn$x $alpha (Set as_refn$y $beta body))))

  (* Test disjointness requirement *)
  rule (TestDisj)
    => (Letrec (LetrecBind @x (Void) (LetrecBind @x (Void) (End))))


  (* Helpers *)
  
  rule (AppendParam param (End))
    => (Param param (End))

  rule (AppendParam new_param (Param param params))
    => (Param param (AppendParam new_param params))

  rule (AppendArg arg (End))
    => (Arg arg (End))

  rule (AppendArg new_arg (Arg arg args))
    => (Arg arg (AppendArg new_arg args))


}
