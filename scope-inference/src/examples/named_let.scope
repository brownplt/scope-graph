language NamedLet {



  (* Functions *)
  
  (Lambda param body) {
    import 1;
    import 2;
    bind 1 in 2;
  }
  (Param name params) {
    import 1;
    import 2;
    export 1;
    export 2;
  }
  (End) {}
  
  (Apply func args) {
    import 1;
    import 2;
  }
  (Arg arg args) {
    import 1;
    import 2;
  }



  (* Letrecs *)

  (Letrec binds body) {
    import 1;
    import 2;
    bind 1 in 2;
  }
  (Bindrec name defn binds) {
    import 1;
    import 2;
    import 3;
    bind 1 in 3;
    bind 3 in 2;
    export 3;
  }


  (* Regular (parallel) Let *)
  
  (Let binds body) {
    import 1;
    import 2;
    bind 1 in 2;
  }
  (Bind name defn binds) {
    import 1;
    import 2;
    import 3;
    export 1;
    export 3;
  }


  (* Named-Let sugar *)

  sugar (NamedLet tag binds body)
  sugar (NamedLetBind name defn binds)

  rule (NamedLet tag binds body)
    => (DesugarNamedLet tag binds body (End) (End))

  rule (DesugarNamedLet tag (End) body params args)
    => (Apply
         (Letrec
           (Bindrec @f (Lambda params (Let (Bind tag $f (End)) body))
             (End))
           $f)
         args)

  rule (DesugarNamedLet tag (NamedLetBind name defn binds) body params args)
    => (DesugarNamedLet tag binds body (AppendParam name params) (AppendArg defn args))

  rule (AppendParam param (End))
    => (Param param (End))

  rule (AppendParam new_param (Param param params))
    => (Param param (AppendParam new_param params))

  rule (AppendArg arg (End))
    => (Arg arg (End))

  rule (AppendArg new_arg (Arg arg args))
    => (Arg arg (AppendArg new_arg args))

}