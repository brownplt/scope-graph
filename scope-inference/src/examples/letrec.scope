language Letrec {


  (* Functions *)
  
  (Lambda param body) {
    import 1;
    import 2;
    bind 1 in 2;
  }
  (Param name params) {
    import 1;
    import 2;
    export 1;
    export 2;
  }
  (End) {}
  
  (Apply func args) {
    import 1;
    import 2;
  }
  (Arg arg args) {
    import 1;
    import 2;
  }

  (* Regular (parallel) Let *)
  
  (Let binds body) {
    import 1;
    import 2;
    bind 1 in 2;
  }
  (LetBind name defn binds) {
    import 1;
    import 2;
    import 3;
    export 1;
    export 3;
    bind 1 in 3;
    bind 3 in 1;
  }
  
  (Set var defn stmts) {
    import 1;
    import 2;
    import 3;
    export 3;
  }


  (* Sugars *)

  sugar (Letrec binds body)
  sugar (LetrecBind var init binds)
  sugar (RLetrecBind var init binds)


  (* Letrec *)

  rule (Letrec binds body)
    => (DesugarLetrec (ReverseLetrecBinds binds (End)) (End) (End) body)

  (* One or more bindings *)
  rule (DesugarLetrec (End) (LetBind a b undef_binds) (LetBind c d init_binds) body)
    => (Let (LetBind a b undef_binds) (Let (LetBind c d init_binds) body))

  (* No bindings *)
  rule (DesugarLetrec (End) (End) (End) body)
    => (Let (End) (Let (End) body))

  rule (DesugarLetrec
         (LetrecBind var init binds)
         undef_binds
         init_binds
         body)
    => (DesugarLetrec
         binds
         (LetBind var (Void) undef_binds)
         (LetBind @x init init_binds)
         (Set (Todo) $x body))

  rule (ReverseLetrecBinds (End) (End))
    => (End)

  rule (ReverseLetrecBinds (End) (RLetrecBind id init binds))
    => (LetrecBind id init binds)

  rule (ReverseLetrecBinds (LetrecBind id init binds) reversed)
    => (ReverseLetrecBinds binds (RLetrecBind id init reversed))


  (* Sanity Check: Make sure that Letrec has the same binding
     weather it's desugared in general (above), or for the specific
     case of two bindings (below). *)

  rule (Letrec (LetrecBind x a (LetrecBind y b (End))) body)
    => (Let (LetBind x (Void) (LetBind y (Void) (End)))
         (Let (LetBind @alpha a (LetBind @beta b (End)))
           (Set (Todo) $alpha (Set (Todo) $beta body))))

}