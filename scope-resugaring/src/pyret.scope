language Pyret {

  Lambda 3 {
    (* params ann body *)
    import 1;
    import 2;
    import 3;
    bind 1 in 3;
  }

  Apply 2 {
    import 1;
    import 2;
  }

  Arg 2 {
    import 1;
    import 2;
  }

  End 0 {}

  Param 2 {
    import 1;
    import 2;
    export 1;
    export 2;
  }

  Letrec 2 {
    (* binds, body *)
    import 1;
    import 2;
    export 1;
    bind 1 in 2;
  }

  LetrecBind 4 {
    (* name, ann, value, binds *)
    import 1;
    import 2;
    import 3;
    export 3;
    bind 1 in 3;
    bind 3 in 1;
    bind 3 in 2;
  }

  ABlank 0 {} (* Blank annotation *)


  (* For loops *)

  rule (For iter binds ann body)
    => (DesugarFor iter binds (End) (End) ann body)

  rule (DesugarFor iter (End) params args ann body)
     => (Apply iter (Arg (Lambda (RevParams params (End)) ann body) (RevArgs args (End))))

  rule (DesugarFor iter (ForBind param arg binds) params args ann body)
    => (DesugarFor iter binds (Param param params) (Arg arg args) ann body)


  (* DesugarFor incidentally reverses the param and arg lists, so reverse them back *)

  rule (RevParams (End) (End))
    => (End)

  rule (RevParams (End) (Param param params))
    => (Param param params)

  rule (RevParams (Param param params) rev_params)
    => (RevParams params (Param param rev_params))

  rule (RevArgs (End) (End))
    => (End)

  rule (RevArgs (End) (Arg arg args))
    => (Arg arg args)

  rule (RevArgs (Arg arg args) rev_args)
    => (RevArgs args (Arg arg rev_args))

  (* Fun *)
(*
  rule (Fun name params args ann doc body rest_stmts)
    => (Letrec (LetrecBind name ann (Lambda params (ABlank) body) (End)) rest_stmts)
*)
}
